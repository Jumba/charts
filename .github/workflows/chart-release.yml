name: Release Helm Charts

on:
  push:
    branches: [ main, master ]
    paths:
      - 'bitnami/**/Chart.yaml'
      - '.github/workflows/chart-release.yml'
  workflow_dispatch:
    inputs:
      full_rebuild:
        description: 'Rebuild and publish all charts (first-time or forced)'
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect chart version changes
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.before }}"
          # If base commit is missing (force-push, first run, etc.), fallback safely
          if [ -z "${BASE}" ] || ! git cat-file -e "${BASE}^{commit}" 2>/dev/null; then
            BASE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"
          fi
          echo "Base ref: ${BASE:-<none>} -> ${GITHUB_SHA}"
          changed_dirs=()
          if [ -n "${BASE}" ] && git cat-file -e "${BASE}^{commit}" 2>/dev/null; then
            if git diff --name-only "${BASE}" "${GITHUB_SHA}" -- 'bitnami/**/Chart.yaml' >/tmp/changed_files 2>/dev/null; then
              while IFS= read -r f; do
                [ -n "$f" ] || continue
                old_v=$(git show "${BASE}:${f}" 2>/dev/null | awk -F': ' '/^version:/{print $2; exit}')
                new_v=$(git show "${GITHUB_SHA}:${f}" 2>/dev/null | awk -F': ' '/^version:/{print $2; exit}')
                if [ -n "${old_v}" ] && [ -n "${new_v}" ] && [ "${old_v}" != "${new_v}" ]; then
                  echo "Version changed in ${f}: ${old_v} -> ${new_v}"
                  changed_dirs+=("$(dirname "$f")")
                fi
              done < /tmp/changed_files
            fi
          fi

          # For manual dispatch with full rebuild, mark as changed
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.full_rebuild }}" = "true" ]; then
            echo "Manual full rebuild requested"
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "changed_charts=ALL" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ ${#changed_dirs[@]} -gt 0 ]; then
            printf '%s\n' "Changed charts:" "${changed_dirs[@]}"
            # space-separated for readability
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "changed_charts=${changed_dirs[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "No chart version changes detected; skipping release steps."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            echo "changed_charts=" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure gh-pages branch exists
        shell: bash
        run: |
          set -euo pipefail
          if ! git ls-remote --heads origin gh-pages >/dev/null 2>&1; then
            echo "Creating gh-pages branch"
            git checkout --orphan gh-pages
            git reset --hard
            mkdir -p .
            echo "# Helm chart index" > README.md
            git add README.md
            git commit -m "Initialize gh-pages"
            git push origin gh-pages
            git checkout -
          fi

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        run: |
          HELM_VER="v3.14.4"
          HELM_TGZ="helm-${HELM_VER}-linux-amd64.tar.gz"
          curl -sSL -o ${HELM_TGZ} https://get.helm.sh/${HELM_TGZ}
          sudo tar -C /usr/local/bin -xzf ${HELM_TGZ} --strip-components=1 linux-amd64/helm
          helm version

      - name: Build chart dependencies
        if: steps.detect.outputs.should_release == 'true' || (github.event_name == 'workflow_dispatch' && inputs.full_rebuild == 'true')
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ steps.detect.outputs.changed_charts }}" = "ALL" ]; then
            charts=$(find bitnami -maxdepth 1 -mindepth 1 -type d | sort)
          else
            charts="${{ steps.detect.outputs.changed_charts }}"
          fi
          for d in $charts; do
            [ -f "$d/Chart.yaml" ] || continue
            echo "helm dependency build $d"
            helm dependency build "$d"
          done

      - name: Run chart-releaser
        if: steps.detect.outputs.should_release == 'true' || (github.event_name == 'workflow_dispatch' && inputs.full_rebuild == 'true')
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: bitnami
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
